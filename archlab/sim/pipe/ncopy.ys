#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# 郭劲豪 2200013146@stu.pku.edu.cn
#
# 首先我们可以将 iaddq 指令加入到pipe-full.hcl中, 然后将ys文件中的常数设置 irmovq 删除.
# 同时根据书本的第4.57作业题, 我们实现一个加载转发, 把所有的load后的使用m_valM放到M_valA中, 
# 那么这样子就可以在mrmovq后直接接一个rmmovq, 而不需要任何的气泡和暂停.
# 比较需要注意的点是在更改完hcl的流水线寄存器部分后, 要修改对应的气泡和暂停标志. 
# 发现 %rax 的初始值是 0 , 所以不需要初始化.
# 接下来考虑循环展开, 因为除了已经用到了的%rax, %rsi, %rdi, %rdx四个寄存器, 以及无法修改
# 的 %rsp 寄存器, 我们一共还剩下10个寄存器, 对此做10路循环展开, 最后就会剩下0~9这十种情况的余数.
# 考虑如何优化对剩余的处理, 我们发现在计算平均CPE的时候, 0,1,2的数值比较高, 但是占比又是一样的,
# 所以我们考虑用3叉树( 这也是考虑到条件码后的跳转可以为 jl, jg, je 三种) 来优化
# 这个时候我们将0,1,2,3放在第一层和第二层的第一个子节点, 可以尽可能的降低他们需要的循环周期.
# 这个时候发现 Average CPE 大概是在 7.6 左右, 考虑进一步的优化.
# 不难发现, 每一个判断前面都有一个 jle .Label的代码, 如果判断错误的话会导致条件预测错误,从而
# 使得 bubble 和 stall 增加, 这时候我们将 iaddq 改为条件加法, 在 valC 处增加一个判断,就
# 可以不需要这个 jle 命令, 然后考虑怎么通过 YIS 测试, 只需要判断当前运行环境是 psim 还是 YIS,
# 然后如果是psim就按照我们现有的方法, 如果是 YIS 测试就按照最初给的代码 ncopy.ys 执行即可.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
# Check YIS or PSIM
	irmovq $0, %r8
	andq %r8,%r8
	iaddq $1, %r8
	jne YIS

	iaddq $-10, %rdx     # K Looping Unrolling
	jl Remain
Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r13
	mrmovq 32(%rdi), %r14
	mrmovq 40(%rdi), %rbp
	mrmovq 48(%rdi), %rbx
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %r8
	mrmovq 72(%rdi), %r9


	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi) 
	rmmovq %r12, 16(%rsi) 
	rmmovq %r13, 24(%rsi) 
	rmmovq %r14, 32(%rsi) 
	rmmovq %rbp, 40(%rsi)
	rmmovq %rbx, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %r8, 64(%rsi)
	rmmovq %r9, 72(%rsi)


	iaddq $80, %rdi		# src++
	iaddq $80, %rsi		# dst++

	andq %r10, %r10		# val <= 0?
	#jle Npos1			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:
	andq %r11, %r11		# val <= 0?
	#jle Npos2			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:
	andq %r12, %r12		# val <= 0?
	#jle Npos3			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:
	andq %r13, %r13		# val <= 0?
	#jle Npos4			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:
	andq %r14, %r14		# val <= 0?
	#jle Npos5			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:
	andq %rbp, %rbp		# val <= 0?
	#jle Npos6			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:
	andq %rbx, %rbx		# val <= 0?
	#jle Npos7			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos7:
	andq %rcx, %rcx		# val <= 0?
	#jle Npos8			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:
	andq %r8, %r8		# val <= 0?
	#jle Npos9			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos9:
	andq %r9, %r9		# val <= 0?
	#jle Npos10			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos10:

	iaddq $-10, %rdx
	jge Loop			# if so, goto Loop:

Remain:
	iaddq $7, %rdx
	jl Left1
	je Len3
	jg Right1
Left1:
	iaddq $2, %rdx
	jg Len2
	je Len1
	ret
Left2:
	iaddq $2, %rdx
	jl Len4
	je Len5
	jg Len6
Right1:
	iaddq $-4, %rdx
	jl Left2
	je Len7
Right2:
	iaddq $-1, %rdx
	je Len8

Len9:
	mrmovq 64(%rdi), %r10
	rmmovq %r10, 64(%rsi)
	andq %r10, %r10
	#jle Len8
	iaddq $1, %rax
Len8:
	mrmovq 56(%rdi), %r10
	rmmovq %r10, 56(%rsi)
	andq %r10, %r10
	#jle Len7
	iaddq $1, %rax
Len7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	#jle Len6
	iaddq $1, %rax
Len6:
	mrmovq 40(%rdi), %r10
	rmmovq %r10, 40(%rsi)
	andq %r10, %r10
	#jle Len5
	iaddq $1, %rax
Len5:
	mrmovq 32(%rdi), %r10
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	#jle Len4
	iaddq $1, %rax
Len4:
	mrmovq 24(%rdi), %r10
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	#jle Len3
	iaddq $1, %rax
Len3:
	mrmovq 16(%rdi), %r10
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	#jle Len2
	iaddq $1, %rax
Len2:
	mrmovq 8(%rdi), %r10
	rmmovq %r10, 8(%rsi)
	andq %r10, %r10
	#jle Len1
	iaddq $1, %rax
Len1:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	#jle Done
	iaddq $1, %rax
	jmp Done
YIS:
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

Loopyis:	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposyis		# if so, goto Npos:
	irmovq $1, %r10
	addq %r10, %rax		# count++
Nposyis:	irmovq $1, %r10
	subq %r10, %rdx		# len--
	irmovq $8, %r10
	addq %r10, %rdi		# src++
	addq %r10, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg Loopyis			# if so, goto Loop:

	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f6f804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 806c03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx     # K Looping Unrolling
0x045: 72b501000000000000   | 	jl Remain
0x04e:                      | Loop:	
0x04e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x058: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x062: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x06c: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13
0x076: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14
0x080: 50572800000000000000 | 	mrmovq 40(%rdi), %rbp
0x08a: 50373000000000000000 | 	mrmovq 48(%rdi), %rbx
0x094: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
0x09e: 50874000000000000000 | 	mrmovq 64(%rdi), %r8
0x0a8: 50974800000000000000 | 	mrmovq 72(%rdi), %r9
                            | 
                            | 
0x0b2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0bc: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi) 
0x0c6: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi) 
0x0d0: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi) 
0x0da: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi) 
0x0e4: 40562800000000000000 | 	rmmovq %rbp, 40(%rsi)
0x0ee: 40363000000000000000 | 	rmmovq %rbx, 48(%rsi)
0x0f8: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x102: 40864000000000000000 | 	rmmovq %r8, 64(%rsi)
0x10c: 40964800000000000000 | 	rmmovq %r9, 72(%rsi)
                            | 
                            | 
0x116: c0f75000000000000000 | 	iaddq $80, %rdi		# src++
0x120: c0f65000000000000000 | 	iaddq $80, %rsi		# dst++
                            | 
0x12a: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 	#jle Npos1			# if so, goto Npos:
0x12c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x136:                      | Npos1:
0x136: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 	#jle Npos2			# if so, goto Npos:
0x138: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x142:                      | Npos2:
0x142: 62cc                 | 	andq %r12, %r12		# val <= 0?
                            | 	#jle Npos3			# if so, goto Npos:
0x144: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x14e:                      | Npos3:
0x14e: 62dd                 | 	andq %r13, %r13		# val <= 0?
                            | 	#jle Npos4			# if so, goto Npos:
0x150: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x15a:                      | Npos4:
0x15a: 62ee                 | 	andq %r14, %r14		# val <= 0?
                            | 	#jle Npos5			# if so, goto Npos:
0x15c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x166:                      | Npos5:
0x166: 6255                 | 	andq %rbp, %rbp		# val <= 0?
                            | 	#jle Npos6			# if so, goto Npos:
0x168: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x172:                      | Npos6:
0x172: 6233                 | 	andq %rbx, %rbx		# val <= 0?
                            | 	#jle Npos7			# if so, goto Npos:
0x174: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x17e:                      | Npos7:
0x17e: 6211                 | 	andq %rcx, %rcx		# val <= 0?
                            | 	#jle Npos8			# if so, goto Npos:
0x180: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x18a:                      | Npos8:
0x18a: 6288                 | 	andq %r8, %r8		# val <= 0?
                            | 	#jle Npos9			# if so, goto Npos:
0x18c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x196:                      | Npos9:
0x196: 6299                 | 	andq %r9, %r9		# val <= 0?
                            | 	#jle Npos10			# if so, goto Npos:
0x198: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1a2:                      | Npos10:
                            | 
0x1a2: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x1ac: 754e00000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x1b5:                      | Remain:
0x1b5: c0f20700000000000000 | 	iaddq $7, %rdx
0x1bf: 72da01000000000000   | 	jl Left1
0x1c8: 730b03000000000000   | 	je Len3
0x1d1: 761c02000000000000   | 	jg Right1
0x1da:                      | Left1:
0x1da: c0f20200000000000000 | 	iaddq $2, %rdx
0x1e4: 762b03000000000000   | 	jg Len2
0x1ed: 734b03000000000000   | 	je Len1
0x1f6: 90                   | 	ret
0x1f7:                      | Left2:
0x1f7: c0f20200000000000000 | 	iaddq $2, %rdx
0x201: 72eb02000000000000   | 	jl Len4
0x20a: 73cb02000000000000   | 	je Len5
0x213: 76ab02000000000000   | 	jg Len6
0x21c:                      | Right1:
0x21c: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x226: 72f701000000000000   | 	jl Left2
0x22f: 738b02000000000000   | 	je Len7
0x238:                      | Right2:
0x238: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x242: 736b02000000000000   | 	je Len8
                            | 
0x24b:                      | Len9:
0x24b: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x255: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)
0x25f: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len8
0x261: c0f00100000000000000 | 	iaddq $1, %rax
0x26b:                      | Len8:
0x26b: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10
0x275: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x27f: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len7
0x281: c0f00100000000000000 | 	iaddq $1, %rax
0x28b:                      | Len7:
0x28b: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x295: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x29f: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len6
0x2a1: c0f00100000000000000 | 	iaddq $1, %rax
0x2ab:                      | Len6:
0x2ab: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x2b5: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x2bf: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len5
0x2c1: c0f00100000000000000 | 	iaddq $1, %rax
0x2cb:                      | Len5:
0x2cb: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2d5: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x2df: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len4
0x2e1: c0f00100000000000000 | 	iaddq $1, %rax
0x2eb:                      | Len4:
0x2eb: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x2f5: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x2ff: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len3
0x301: c0f00100000000000000 | 	iaddq $1, %rax
0x30b:                      | Len3:
0x30b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x315: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x31f: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len2
0x321: c0f00100000000000000 | 	iaddq $1, %rax
0x32b:                      | Len2:
0x32b: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x335: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x33f: 62aa                 | 	andq %r10, %r10
                            | 	#jle Len1
0x341: c0f00100000000000000 | 	iaddq $1, %rax
0x34b:                      | Len1:
0x34b: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x355: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x35f: 62aa                 | 	andq %r10, %r10
                            | 	#jle Done
0x361: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x36b:                      | Done:
0x36b: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x36c:                      | End:
                            | #/* $end ncopy-ys */
0x36c:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x36c:                      | check:
                            | 	# Return value test
0x36c: 30fa0100000000000000 | 	irmovq $1,%r10
0x376: 61a0                 | 	subq %r10,%rax
0x378: 739403000000000000   | 	je checkb
0x381: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x38b: 70d204000000000000   | 	jmp cdone
0x394:                      | checkb:
                            | 	# Code length check
0x394: 30f06c03000000000000 | 	irmovq EndFun,%rax
0x39e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3a8: 6120                 | 	subq %rdx,%rax
0x3aa: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3b4: 6102                 | 	subq %rax,%rdx
0x3b6: 75d203000000000000   | 	jge checkm
0x3bf: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3c9: 70d204000000000000   | 	jmp cdone
0x3d2:                      | checkm:
0x3d2: 30f2f804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3dc: 30f3d804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3e6: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x3f0: 6277                 | 	andq %rdi,%rdi
0x3f2: 735004000000000000   | 	je checkpre         # Skip check if count = 0
0x3fb:                      | mcloop:
0x3fb: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x405: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x40f: 6160                 | 	subq %rsi,%rax
0x411: 732d04000000000000   | 	je  mok
0x41a: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x424: 70d204000000000000   | 	jmp cdone
0x42d:                      | mok:
0x42d: 30f00800000000000000 | 	irmovq $8,%rax
0x437: 6002                 | 	addq %rax,%rdx	  # dest ++
0x439: 6003                 | 	addq %rax,%rbx    # src++
0x43b: 30f00100000000000000 | 	irmovq $1,%rax
0x445: 6107                 | 	subq %rax,%rdi    # cnt--
0x447: 76fb03000000000000   | 	jg mcloop
0x450:                      | checkpre:
                            | 	# Check for corruption
0x450: 30f2f004000000000000 | 	irmovq Predest,%rdx
0x45a: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x464: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x46e: 6120                 | 	subq %rdx,%rax
0x470: 738c04000000000000   | 	je checkpost
0x479: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x483: 70d204000000000000   | 	jmp cdone
0x48c:                      | checkpost:
                            | 	# Check for corruption
0x48c: 30f20805000000000000 | 	irmovq Postdest,%rdx
0x496: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4a0: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4aa: 6120                 | 	subq %rdx,%rax
0x4ac: 73c804000000000000   | 	je checkok
0x4b5: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4bf: 70d204000000000000   | 	jmp cdone
0x4c8:                      | checkok:
                            | 	# Successful checks
0x4c8: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4d2:                      | cdone:
0x4d2: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4d8:                      | 	.align 8
0x4d8:                      | src:
0x4d8: ffffffffffffffff     | 	.quad -1
0x4e0: 0200000000000000     | 	.quad 2
0x4e8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4f0:                      | 	.align 16
0x4f0:                      | Predest:
0x4f0: fadebc0000000000     | 	.quad 0xbcdefa
0x4f8:                      | dest:
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508:                      | Postdest:
0x508: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x510:                      | .align 8
                            | # Run time stack
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
                            | 
0x590:                      | Stack:

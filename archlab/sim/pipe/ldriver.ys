#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
# Check YIS or PSIM
	irmovq $0, %r8
	andq %r8,%r8
	iaddq $1, %r8
	jne YIS

	iaddq $-10, %rdx     # K Looping Unrolling
	jl Remain
Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r13
	mrmovq 32(%rdi), %r14
	mrmovq 40(%rdi), %rbp
	mrmovq 48(%rdi), %rbx
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %r8
	mrmovq 72(%rdi), %r9


	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi) 
	rmmovq %r12, 16(%rsi) 
	rmmovq %r13, 24(%rsi) 
	rmmovq %r14, 32(%rsi) 
	rmmovq %rbp, 40(%rsi)
	rmmovq %rbx, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %r8, 64(%rsi)
	rmmovq %r9, 72(%rsi)


	iaddq $80, %rdi		# src++
	iaddq $80, %rsi		# dst++

	andq %r10, %r10		# val <= 0?
	#jle Npos1			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:
	andq %r11, %r11		# val <= 0?
	#jle Npos2			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:
	andq %r12, %r12		# val <= 0?
	#jle Npos3			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:
	andq %r13, %r13		# val <= 0?
	#jle Npos4			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:
	andq %r14, %r14		# val <= 0?
	#jle Npos5			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:
	andq %rbp, %rbp		# val <= 0?
	#jle Npos6			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:
	andq %rbx, %rbx		# val <= 0?
	#jle Npos7			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos7:
	andq %rcx, %rcx		# val <= 0?
	#jle Npos8			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:
	andq %r8, %r8		# val <= 0?
	#jle Npos9			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos9:
	andq %r9, %r9		# val <= 0?
	#jle Npos10			# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos10:

	iaddq $-10, %rdx
	jge Loop			# if so, goto Loop:

Remain:
	iaddq $7, %rdx
	jl Left1
	je Len3
	jg Right1
Left1:
	iaddq $2, %rdx
	jg Len2
	je Len1
	ret
Left2:
	iaddq $2, %rdx
	jl Len4
	je Len5
	jg Len6
Right1:
	iaddq $-4, %rdx
	jl Left2
	je Len7
Right2:
	iaddq $-1, %rdx
	je Len8

Len9:
	mrmovq 64(%rdi), %r10
	rmmovq %r10, 64(%rsi)
	andq %r10, %r10
	#jle Len8
	iaddq $1, %rax
Len8:
	mrmovq 56(%rdi), %r10
	rmmovq %r10, 56(%rsi)
	andq %r10, %r10
	#jle Len7
	iaddq $1, %rax
Len7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	#jle Len6
	iaddq $1, %rax
Len6:
	mrmovq 40(%rdi), %r10
	rmmovq %r10, 40(%rsi)
	andq %r10, %r10
	#jle Len5
	iaddq $1, %rax
Len5:
	mrmovq 32(%rdi), %r10
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	#jle Len4
	iaddq $1, %rax
Len4:
	mrmovq 24(%rdi), %r10
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	#jle Len3
	iaddq $1, %rax
Len3:
	mrmovq 16(%rdi), %r10
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	#jle Len2
	iaddq $1, %rax
Len2:
	mrmovq 8(%rdi), %r10
	rmmovq %r10, 8(%rsi)
	andq %r10, %r10
	#jle Len1
	iaddq $1, %rax
Len1:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	#jle Done
	iaddq $1, %rax
	jmp Done
YIS:
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

Loopyis:	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposyis		# if so, goto Npos:
	irmovq $1, %r10
	addq %r10, %rax		# count++
Nposyis:	irmovq $1, %r10
	subq %r10, %rdx		# len--
	irmovq $8, %r10
	addq %r10, %rdi		# src++
	addq %r10, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg Loopyis			# if so, goto Loop:

	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 5
	.quad 6
	.quad -7
	.quad -8
	.quad 9
	.quad -10
	.quad -11
	.quad -12
	.quad -13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad 18
	.quad -19
	.quad 20
	.quad -21
	.quad 22
	.quad 23
	.quad -24
	.quad -25
	.quad 26
	.quad 27
	.quad -28
	.quad 29
	.quad 30
	.quad -31
	.quad -32
	.quad 33
	.quad 34
	.quad -35
	.quad 36
	.quad -37
	.quad -38
	.quad -39
	.quad 40
	.quad -41
	.quad 42
	.quad 43
	.quad -44
	.quad 45
	.quad -46
	.quad 47
	.quad 48
	.quad -49
	.quad -50
	.quad 51
	.quad -52
	.quad 53
	.quad -54
	.quad 55
	.quad -56
	.quad -57
	.quad -58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
